% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pls_big.R
\name{pls_big}
\alias{pls_big}
\alias{matrixpls_stream_bigmatrix}
\title{Partial least squares for bigmemory matrices}
\usage{
pls_big(
  X,
  Y,
  ncomp = 2L,
  tol = 1e-06,
  max_iter = 500L,
  stream = FALSE,
  num.rows.chunk = 1e+06,
  backingfile = NULL,
  backingpath = NULL,
  descriptorfile = NULL,
  type = "double",
  ...
)

matrixpls_stream_bigmatrix(
  X,
  Y,
  ncomp = 2L,
  tol = 1e-06,
  max_iter = 500L,
  num.rows.chunk = 1e+06,
  ...
)
}
\arguments{
\item{X}{Either a `bigmemory::big.matrix`, a
`bigmemory::big.matrix.descriptor`, or a character path to a delimited file
that can be read with [bigmemory::read.big.matrix()].}

\item{Y}{Numeric response matrix with matching number of rows. Vectors are
coerced to a one-column matrix.}

\item{ncomp}{Number of latent components to extract.}

\item{tol}{Convergence tolerance for the iterative updates.}

\item{max_iter}{Maximum number of iterations for the NIPALS inner loop.}

\item{stream}{Logical; when `TRUE`, force the chunk-wise R implementation
via [matrixpls_stream_bigmatrix()].}

\item{num.rows.chunk}{Number of rows to load per chunk when
`stream = TRUE`.}

\item{backingfile, backingpath, descriptorfile}{Optional arguments passed to
[bigmemory::read.big.matrix()] when `X` is a file path.}

\item{type}{Storage mode to use when reading from a file path, defaulting to
`"double"`.}

\item{...}{Reserved for future extensions.}
}
\value{
A list containing
  * `scores`: X-score matrix (`T`)
  * `Yscores`: Y-score matrix (`U`)
  * `weights`: weight matrix (`W`)
  * `loadings`: X-loading matrix (`P`)
  * `Yloadings`: Y-loading matrix (`Q`)
  * `coefficients`: regression coefficients linking `T` and `U`
}
\description{
`pls_big()` fits a partial least squares (PLS) model using a NIPALS
algorithm implemented in C++ that operates directly on
[bigmemory::big.matrix] inputs. Both in-memory and file-backed matrices are
supported. `matrixpls_stream_bigmatrix()` is a pure R fallback that performs
the same computation by streaming over chunks of a file-backed
`big.matrix` without loading it fully into memory.
}
