% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/big_pls_cox_gd.R
\name{big_pls_cox_gd}
\alias{big_pls_cox_gd}
\title{Gradient-Descent Solver for Cox Models on Big Matrices}
\usage{
big_pls_cox_gd(
  X,
  time,
  status,
  ncomp = NULL,
  max_iter = 500L,
  tol = 1e-06,
  learning_rate = 0.01
)
}
\arguments{
\item{X}{A \code{\link[bigmemory:big.matrix-class]{bigmemory::big.matrix}} containing
the design matrix (rows are observations).}

\item{time}{A numeric vector of follow-up times with length equal to the
number of rows of \code{X}.}

\item{status}{A numeric or integer vector of the same length as \code{time}
containing the event indicators (1 for an event, 0 for censoring).}

\item{ncomp}{An integer giving the number of components (columns) to use from
\code{X}. Defaults to \code{min(5, ncol(X))}.}

\item{max_iter}{Maximum number of gradient-descent iterations (default 500).}

\item{tol}{Convergence tolerance on the Euclidean distance between successive
coefficient vectors.}

\item{learning_rate}{Step size used for the gradient-descent updates.}
}
\value{
A list with components \code{coefficients}, \code{loglik}, \code{iterations} and
\code{converged} describing the fitted model.
}
\description{
Fits a Cox proportional hazards regression model using a gradient-descent
optimizer implemented in C++. The function operates directly on a
\code{\link[bigmemory:big.matrix-class]{bigmemory::big.matrix}} object to avoid
materialising large design matrices in memory.
}
\examples{
\dontrun{
library(bigmemory)
set.seed(1)
n <- 50
p <- 10
X <- bigmemory::as.big.matrix(matrix(rnorm(n * p), n, p))
time <- rexp(n, rate = 0.1)
status <- rbinom(n, 1, 0.7)
fit <- big_pls_cox_gd(X, time, status, ncomp = 3, max_iter = 200)
}
}
